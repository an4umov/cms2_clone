<?php

namespace common\models;

use backend\models\Tree;
use creocoder\nestedsets\NestedSetsBehavior;
use kartik\tree\TreeView;
use Yii;
use yii\base\Module;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\helpers\ArrayHelper;
use yii\helpers\VarDumper;

/**
 * This is the model class for table "menu".
 *
 * @property int $id
 * @property string $title
 * @property string $alias
 * @property int $parent_id
 * @property int $status
 * @property int $created_at
 * @property int $updated_at
 *
 * @property MenuMaterial[] $menuMaterials
 * @property Material[] $materials
 * @property string $description
 * @property string $change_date [datetime]
 * @property bool $child_allowed [boolean]
 * @property bool $front_visible [boolean]
 * @property string $h1 [varchar(255)]
 * @property string $meta_keywords [varchar(255)]
 * @property string $meta_description [varchar(255)]
 * @property string $content
 */
class Menu extends Tree
{
    const SOURCE = 'menu';
    const MAX_LEVEL = 2;

    public $menuTags = [];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'menu';
    }

    public function getDbConnection()
    {
        return Yii::$app->db;
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return ArrayHelper::merge(
            parent::rules(),
            [
                [['title', 'alias'], 'required'],
                [['front_visible'], 'boolean'],
                ['menuTags', 'each', 'rule' => ['string']],
                [['parent_id', 'status', 'created_at', 'updated_at'], 'default', 'value' => null],
                [['parent_id', 'status', 'created_at', 'updated_at'], 'integer'],
                [['title', 'alias', 'h1', 'meta_keywords', 'meta_description'], 'string', 'max' => 256],
                [['content'], 'string'],
                [['alias'], 'unique'],
            ]);
    }

    /**
     * @return array
     */
    public function behaviors()
    {
        try {
            /** @var Module $module */
            $module = TreeView::module();
            $settings = ['class' => NestedSetsBehavior::class] + $module->treeStructure;
            $treeBehaviors = empty($module->treeBehaviorName) ? [$settings] : [$module->treeBehaviorName => $settings];
        } catch(\yii\base\InvalidConfigException $e) {
            $treeBehaviors = [];
        }

        //parent::behaviors();

        return ArrayHelper::merge( $treeBehaviors, [
            [ 'class' => TimestampBehavior::class ],
            [
                'class' => SluggableBehavior::class,
                'attribute' => 'title',
                'slugAttribute' => 'alias',
            ],
            'slug' => [
                'class' => 'common\behaviors\Slug',
                'in_attribute' => 'title',
                'out_attribute' => 'alias',
                'translit' => true
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Заголовок',
            'alias' => 'Урл',
            'parent_id' => 'Родитель',
            'status' => 'Опубликован',
            'menuTags' => 'Теги',
            'created_at' => 'Создан',
            'updated_at' => 'Обновлен',
            'front_visible' => 'Видимость',
            'h1' => 'Главный заголовок скраницы (h1)',
            'meta_keywords' => 'Контент мета-тега keywords',
            'meta_description' => 'Контент мета-тега description',
            'content' => 'Контент',
        ];
    }

    /**
     * @return \yii\db\ActiveQueryg
     */
    public function getMaterials()
    {
        return $this->hasMany(Material::class, ['id' => 'material_id'])->viaTable('menu_material', ['menu_id' => 'id']);
    }

    /**
     * {@inheritdoc}
     * @return \common\models\query\MenuQuery the active query used by this AR class.
     */
    /*public static function find()
    {
        return new \common\models\query\MenuQuery(get_called_class());
    }*/

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTags()
    {
        return $this->hasMany(Tag::class, ['id' => 'tag_id'])->viaTable('tag_menu', ['menu_id' => 'id']);
    }

    /**
     * @return bool
     */
    public function beforeValidate()
    {
        if ($this->isNewRecord) {
            $this->title = $this->name;
        }

        return parent::beforeValidate();
    }

    public function afterFind()
    {
        $this->menuTags = ArrayHelper::map($this->tags, 'name', 'name');
    }

    public function afterSave($insert, $changedAttributes)
    {
        $this->_assignTags();
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    private function _assignTags()
    {
        $tags = Tag::find()->all();
        $_tags = [];

        foreach ( $tags as $tag ) {
            $_tags[$tag->name] = $tag;
        }
        if ( ! empty($this->menuTags) ) {
            $allTags = ArrayHelper::map($tags, 'name', 'name');

            foreach ( $this->menuTags as $tag ) {
                if ( ! in_array($tag, $allTags) ) {
                    $linkTag = new Tag();
                    $linkTag->name = $tag;
                    $linkTag->save();
                } else {
                    $linkTag = $_tags[$tag];
                }
                $this->link('tags', $linkTag);
            }
        }
    }

    public function getUrl()
    {
        return '#';
    }


}
